package ru.n1str.service;

import ru.n1str.model.*;
import java.util.Map;
import java.util.List;

public class WalletService {
    private final UserService userService;

    public WalletService(UserService userService) {
        this.userService = userService;
    }

    public boolean addIncome(double amount, String category) {
        if (!userService.isLoggedIn() || amount <= 0) {
            return false;
        }

        Transaction transaction = new Transaction(amount, category, TransactionType.INCOME);
        userService.getCurrentUser().getWallet().addTransaction(transaction);
        System.out.println("‚úÖ –î–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω: " + transaction);
        return true;
    }

    public boolean addExpense(double amount, String category) {
        if (!userService.isLoggedIn() || amount <= 0) {
            return false;
        }

        Wallet wallet = userService.getCurrentUser().getWallet();
        Transaction transaction = new Transaction(amount, category, TransactionType.EXPENSE);

        Map<String, Double> expenses = wallet.getExpensesByCategory();
        double currentCategoryExpense = expenses.getOrDefault(category, 0.0) + amount;
        double categoryBudget = wallet.getBudget(category);

        if (categoryBudget > 0 && currentCategoryExpense > categoryBudget) {
            System.out.println("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ü—Ä–µ–≤—ã—à–µ–Ω –±—é–¥–∂–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ " + category);
            System.out.printf("–ë—é–¥–∂–µ—Ç: %.2f —Ä—É–±., –¢–µ–∫—É—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: %.2f —Ä—É–±.\n",
                    categoryBudget, currentCategoryExpense);
        }

        if (wallet.getTotalIncome() < wallet.getTotalExpense() + amount) {
            System.out.println("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –†–∞—Å—Ö–æ–¥—ã –ø—Ä–µ–≤—ã—à–∞—é—Ç –¥–æ—Ö–æ–¥—ã!");
        }

        wallet.addTransaction(transaction);
        System.out.println("‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω: " + transaction);
        return true;
    }

    public boolean setBudget(String category, double amount) {
        if (!userService.isLoggedIn() || amount <= 0) {
            return false;
        }

        userService.getCurrentUser().getWallet().setBudget(category, amount);
        System.out.printf("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±—é–¥–∂–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ %s: %.2f —Ä—É–±.\n",
                category, amount);
        return true;
    }

    public void showTransactions() {
        if (!userService.isLoggedIn()) {
            return;
        }

        List<Transaction> transactions = userService.getCurrentUser().getWallet().getTransactions();
        System.out.println("\n=== –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ===");
        for (int i = 0; i < transactions.size(); i++) {
            System.out.printf("%d. %s\n", i + 1, transactions.get(i));
        }
    }

    public boolean editTransaction(int index, double amount, String category) {
        if (!userService.isLoggedIn() || amount <= 0) {
            return false;
        }

        List<Transaction> transactions = userService.getCurrentUser().getWallet().getTransactions();
        if (index < 0 || index >= transactions.size()) {
            System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!");
            return false;
        }

        Transaction transaction = transactions.get(index);
        transaction.setAmount(amount);
        transaction.setCategory(category);
        System.out.println("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞: " + transaction);
        return true;
    }

    public boolean deleteTransaction(int index) {
        if (!userService.isLoggedIn()) {
            return false;
        }

        List<Transaction> transactions = userService.getCurrentUser().getWallet().getTransactions();
        if (index < 0 || index >= transactions.size()) {
            System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!");
            return false;
        }

        Transaction removed = transactions.remove(index);
        System.out.println("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞: " + removed);
        return true;
    }

    public void showStatistics() {
        if (!userService.isLoggedIn()) {
            return;
        }

        Wallet wallet = userService.getCurrentUser().getWallet();
        double totalIncome = wallet.getTotalIncome();
        double totalExpense = wallet.getTotalExpense();

        System.out.println("\n=== –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===");
        System.out.printf("üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: %.2f —Ä—É–±.\n", totalIncome);
        System.out.printf("üí∏ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: %.2f —Ä—É–±.\n", totalExpense);
        System.out.printf("üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %.2f —Ä—É–±.\n", totalIncome - totalExpense);

        System.out.println("\nüìä –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:");
        Map<String, Double> expensesByCategory = wallet.getExpensesByCategory();
        Map<String, Double> budgets = wallet.getCategoryBudgets();

        for (Map.Entry<String, Double> entry : expensesByCategory.entrySet()) {
            String category = entry.getKey();
            double expense = entry.getValue();
            double budget = budgets.getOrDefault(category, 0.0);

            System.out.printf("- %s: %.2f —Ä—É–±.", category, expense);
            if (budget > 0) {
                double remaining = budget - expense;
                System.out.printf(" (–ë—é–¥–∂–µ—Ç: %.2f —Ä—É–±., –û—Å—Ç–∞—Ç–æ–∫: %.2f —Ä—É–±.)",
                        budget, remaining);
                if (remaining < 0) {
                    System.out.print(" ‚ö†Ô∏è");
                }
            }
            System.out.println();
        }
    }
}
